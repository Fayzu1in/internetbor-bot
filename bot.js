const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");

// Replace with your Bot API token
const token = "7384364534:AAFGa_81kwYRHWRhBLF6EgkZjyaNeY4gek8";
// Replace with your Yandex Maps API key
const yandexApiKey = "ae67d8b1-fa31-44d0-94c2-6a583d082d64";
const apiEndpoint = "https://internetbor.uz/api/v1/bot-callback/";

// Create a bot that uses polling to fetch new updates
const bot = new TelegramBot(token, { polling: true });

// Object to track conversation state
const userState = {};
const userData = {};

// Handle the /start command
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  // Ask the user to select a language
  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data: "language_russian" }],
        [{ text: "–£–∑–±–µ–∫—Å–∫–∏–π üá∫üáø", callback_data: "language_uzbek" }],
      ],
    },
  });
});

// Handle language selection
bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data === "language_russian") {
    userState[chatId] = { language: "ru" };
    bot.sendMessage(
      chatId,
      "–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–º–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç? –û—Ç–ø—Ä–∞–≤—å –Ω–∞–º —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –º—ã –∑–Ω–∞–ª–∏, –∫–∞–∫–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –µ—Å—Ç—å –Ω–∞ —Ç–≤–æ–µ–π —É–ª–∏—Ü–µ.",
      {
        reply_markup: {
          keyboard: [
            [{ text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      }
    );
  } else if (data === "language_uzbek") {
    userState[chatId] = { language: "uz" };
    bot.sendMessage(
      chatId,
      "Salom! Internetni uyingizga o‚Äòtkazmoqchimisiz? O‚Äòzingizning geolokatsiyangizni yuboring, biz sizning ko‚Äòchada qaysi provayderlar mavjudligini bilamiz.",
      {
        reply_markup: {
          keyboard: [
            [{ text: "Geolokatsiyani yuboring", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      }
    );
  }

  // Answer the callback query
  bot.answerCallbackQuery(query.id);
});

// Handle incoming location data
bot.on("location", async (msg) => {
  const chatId = msg.chat.id;
  const { latitude, longitude } = msg.location;

  // Get user language
  const language = userState[chatId]?.language || "ru";

  try {
    // Reverse geocode the location using Yandex Maps API
    const response = await axios.get(`https://geocode-maps.yandex.ru/1.x/`, {
      params: {
        geocode: `${longitude},${latitude}`,
        format: "json",
        apikey: yandexApiKey,
      },
    });

    // Extract address from response
    const address =
      response.data.response.GeoObjectCollection.featureMember[0].GeoObject
        .name;

    // Store location data
    userData[chatId] = { ...userData[chatId], address };

    // Send a message to confirm address
    const confirmMessage =
      language === "ru"
        ? `–í–∞—à –∞–¥—Ä–µ—Å: ${address}. –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å?`
        : `Manzil: ${address}. Siz bu manzilni tasdiqlaysizmi?`;

    bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.", {
      reply_markup: {
        remove_keyboard: true, // Hide the previous keyboard
      },
    });

    bot.sendMessage(chatId, confirmMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–î–∞ ‚úÖ", callback_data: "confirm_yes" }],
          [{ text: "–ù–µ—Ç üö´", callback_data: "confirm_no" }],
        ],
      },
    });
  } catch (error) {
    console.error("Error fetching address:", error);
    bot.sendMessage(
      chatId,
      language === "ru"
        ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        : "Manzilni olishda xatolik yuz berdi. Iltimos, yana bir bor urinib ko'ring."
    );
  }
});

// Handle callback queries
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const language = userState[chatId]?.language || "ru";

  if (data === "confirm_yes") {
    // Prompt the user to either send their phone number via a button or enter it manually
    const promptMessage =
      language === "ru"
        ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é."
        : "Iltimos, telefon raqamingizni yuboring yoki qo'lda kiriting.";

    bot.sendMessage(chatId, promptMessage, {
      reply_markup: {
        keyboard: [
          [
            {
              text:
                language === "ru"
                  ? "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                  : "Telefon raqamini yuboring",
              request_contact: true,
            },
          ],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });

    // Update state to expect phone number input (either via button or manually)
    userState[chatId] = "awaiting_phone_number";
  } else if (data === "confirm_no") {
    // Prompt the user to write their location manually
    bot.sendMessage(
      chatId,
      language === "ru"
        ? "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é."
        : "Manzilni qo‚Äòlda yozing."
    );
    userState[chatId] = "awaiting_manual_location"; // Track state
  } else if (data === "confirm_final") {
    const { name, phone_number, address } = userData[chatId];

    bot.sendMessage(
      chatId,
      language === "ru"
        ? "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        : "Ma'lumot uchun rahmat! Tez orada siz bilan bog'lanamiz."
    );
    try {
      const response = await axios.post(apiEndpoint, {
        name: name,
        phone: phone_number,
        address: address,
      });
      console.log("Response from server:", response.data);

      // Optionally, handle the response from the server
      if (response.status === 201) {
        bot.sendMessage(
          chatId,
          language === "ru"
            ? "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"
            : "Ma'lumotlaringiz muvaffaqiyatli yuborildi!"
        );
      } else {
        bot.sendMessage(
          chatId,
          language === "ru"
            ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö."
            : "Ma'lumotlaringizni yuborishda xatolik yuz berdi."
        );
      }
    } catch (error) {
      console.error("Error sending data:", error);
      bot.sendMessage(
        chatId,
        language === "ru"
          ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö."
          : "Ma'lumotlaringizni yuborishda xatolik yuz berdi."
      );
    }

    // Optionally, you can remove the inline keyboard if needed
    bot.editMessageReplyMarkup(
      { inline_keyboard: [] },
      {
        chat_id: chatId,
        message_id: query.message.message_id,
      }
    );
  }

  // Answer the callback query
  bot.answerCallbackQuery(query.id);
});

// Handle incoming contact data (phone number)
bot.on("contact", (msg) => {
  const chatId = msg.chat.id;
  const { phone_number } = msg.contact;

  // Store phone number data
  userData[chatId] = { ...userData[chatId], phone_number };

  // Remove the keyboard and request the user's name
  bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è.", {
    reply_markup: {
      remove_keyboard: true, // Hide the previous keyboard
    },
  });
  userState[chatId] = "awaiting_name"; // Track state
});

// Handle incoming text data (user name or manual phone number)
bot.on("text", (msg) => {
  const chatId = msg.chat.id;
  const state = userState[chatId];

  if (state === "awaiting_phone_number") {
    const phoneNumber = msg.text;

    // Store manually entered phone number
    userData[chatId] = { ...userData[chatId], phone_number: phoneNumber };

    // Prompt the user to enter their name
    bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è.", {
      reply_markup: {
        remove_keyboard: true, // Hide the previous keyboard
      },
    });
    userState[chatId] = "awaiting_name"; // Track state
  } else if (state === "awaiting_name") {
    const name = msg.text;

    // Store the name
    userData[chatId] = { ...userData[chatId], name };

    // Ask the user to confirm their details
    const { address, phone_number } = userData[chatId];
    const language = userState[chatId]?.language || "ru";

    const confirmDetails =
      language === "ru"
        ? `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n\n–ò–º—è: ${name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone_number}\n–ê–¥—Ä–µ—Å: ${address}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?`
        : `Iltimos, ma'lumotlaringizni tasdiqlang:\n\nIsm: ${name}\nTelefon: ${phone_number}\nManzil: ${address}\n\nHammasi to‚Äòg‚Äòrimi?`;

    bot.sendMessage(chatId, confirmDetails, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–î–∞ ‚úÖ", callback_data: "confirm_final" }],
          [{ text: "–ù–µ—Ç üö´", callback_data: "confirm_no" }],
        ],
      },
    });
  } else if (state === "awaiting_manual_location") {
    const address = msg.text;

    // Store the manually entered address
    userData[chatId] = { ...userData[chatId], address };

    // Ask for phone number
    const language = userState[chatId]?.language || "ru";
    bot.sendMessage(
      chatId,
      language === "ru"
        ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        : "Iltimos, telefon raqamingizni yuboring."
    );

    // Update state to expect phone number
    userState[chatId] = "awaiting_phone_number";
  }
});
